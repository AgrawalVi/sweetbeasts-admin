// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(CUSTOMER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// model Product {
//   id           Int     @id @default(autoincrement())
//   name         String
//   priceInCents Int
//   imagePath    String
//   description  String
//   inventory    Int     @default(0)
//   available    Boolean @default(false)
//   numSold      Int     @default(0)

//   orders  Order[]
//   carts   Cart[]
//   reviews Review[]
// }

// model Customer {
//   id                     String   @id @default(cuid())
//   firstName              String
//   lastName               String
//   subscribedToNewsletter Boolean  @default(false)
//   email                  String   @unique
//   phone                  String?
//   createdAt              DateTime @default(now())
//   numOrders              Int @default(0)

//   cart    Cart?
//   orders  Order[]
//   reviews Review[]
// }

// model AdminUser {
//   id        String   @id @default(uuid())
//   userRole  Int
//   active    Boolean  @default(true)
//   lastLogin DateTime
// }

// model Order {
//   id               Int      @id @default(autoincrement())
//   pricePaidInCents Int[]
//   dateCreated      DateTime @default(now())
//   dateShipped      DateTime
//   trackingNumber   String
//   // Need to add address information
//   //address String
//   status           Int

//   customerId String
//   customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Restrict)
//   products   Product[]
// }

// model Cart {
//   id         String @id @default(uuid())
//   customerId String @unique

//   customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
//   products Product[]
// }

// model Review {
//   id        Int    @id @default(autoincrement())
//   productId Int
//   title     String
//   content   String
//   rating    Int
//   authorId  String

//   product Product  @relation(fields: [productId], references: [id])
//   author  Customer @relation(fields: [authorId], references: [id])
// }
