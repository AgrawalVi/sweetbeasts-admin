// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  CANCELLED
  SHIPPED
  DELIVERED
  EXCEPTION
  RETURNED
}

enum ShippingMethod {
  STANDARD
  EXPEDITED
}

enum Courier {
  UPS
  USPS
  FEDEX
  DHL
}

enum ContactUsStatus {
  OPEN
  CLAIMED
  RESOLVED
}

enum ContactUsType {
  FEEDBACK
  SUPPORT
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String
  role                  UserRole               @default(CUSTOMER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  newsletterSubscribed Boolean @default(false)

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems                CartItem[]
  ShippingAddress          ShippingAddress[]
  Order                    Order[]
  contactUsUserSubmissions ContactUsSubmission[] @relation("SubmittedBy")
  contactUsUserClaims      ContactUsSubmission[] @relation("ClaimedBy")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    String?
  guestId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  productId Int

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // user can only have 1 product active at a time
  @@unique([guestId, productId]) // guest can only have 1 product active at a time
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  priceInCents     Int
  description      String
  stripeProductId  String   @unique
  stripePriceId    String   @unique
  primaryImagePath String?
  productHref      String   @default("/products")
  numSold          Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  inventory Int

  available Boolean @default(true)

  cartItems            CartItem[]
  lineItems            LineItem[]
  openCheckoutSessions OpenCheckoutSessions[]
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      String?
  guestUserId String?
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderNumber String @unique

  stripeOrderId    String @unique
  stripeCustomerId String

  shippingAddressId Int
  ShippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Restrict)

  couponId String?

  totalPaidInCents    Int
  taxesPaidInCents    Int?
  shippingPaidInCents Int?

  shippingMethod ShippingMethod @default(STANDARD)
  orderStatus    OrderStatus    @default(PROCESSING)

  trackingNumber String?
  trackingUrl    String?
  courier        Courier?

  lineItems           LineItem[]
  User                User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestUser           GuestUser?            @relation(fields: [guestUserId], references: [id], onDelete: SetNull)
  ViewOrderToken      ViewOrderToken[]
  ContactUsSubmission ContactUsSubmission[]
}

model LineItem {
  id Int @id @default(autoincrement())

  pricePerUnitInCents Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  quantity  Int

  Order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  orderId Int
}

model ShippingAddress {
  id          Int     @id @default(autoincrement())
  userId      String?
  guestUserId String?
  email       String

  recipientName String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  zipCode       String?
  countryCode   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order     Order[]
  User      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  GuestUser GuestUser? @relation(fields: [guestUserId], references: [id])
}

model ViewOrderToken {
  id      String   @id @default(cuid())
  orderId Int
  token   String   @unique
  expires DateTime

  Order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, token])
}

model OpenCheckoutSessions {
  id Int @id @default(autoincrement())

  createdAt               DateTime @default(now())
  stripeCheckoutSessionId String   @unique

  products Product[]
}

model GuestUser {
  id String @id @default(uuid())

  stripeCustomerId String @unique
  email            String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shippingAddresses   ShippingAddress[]
  orders              Order[]
  ContactUsSubmission ContactUsSubmission[]
}

model ContactUsSubmission {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactUsStatus ContactUsStatus @default(OPEN)

  userId      String?
  guestUserId String?

  email String
  name  String

  claimedAt       DateTime?
  claimedByUserId String?

  claimedByUser User?      @relation("ClaimedBy", fields: [claimedByUserId], references: [id], onDelete: SetNull)
  user          User?      @relation("SubmittedBy", fields: [userId], references: [id], onDelete: SetNull)
  guestUser     GuestUser? @relation(fields: [guestUserId], references: [id], onDelete: SetNull)

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id])

  contactUsType ContactUsType

  message String[]
}
